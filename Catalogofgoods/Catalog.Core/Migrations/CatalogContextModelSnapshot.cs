// <auto-generated />
using System;
using Catalog.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.Core.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Catalog.Core.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "HP"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "LG"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "CERSANIT"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "ZiBi"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "POPit"
                        });
                });

            modelBuilder.Entity("Catalog.Core.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyerId"), 1L, 1);

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuyerId");

                    b.ToTable("Buyers");

                    b.HasData(
                        new
                        {
                            BuyerId = 1,
                            BuyerName = "Денис Борисенко"
                        },
                        new
                        {
                            BuyerId = 2,
                            BuyerName = "Максим Рибальчук"
                        },
                        new
                        {
                            BuyerId = 3,
                            BuyerName = "Вячеслав Юдін"
                        },
                        new
                        {
                            BuyerId = 4,
                            BuyerName = "Богдан Лаптєв"
                        },
                        new
                        {
                            BuyerId = 5,
                            BuyerName = "Даніель Демчук"
                        });
                });

            modelBuilder.Entity("Catalog.Core.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryNumber")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Ноутбуки і компютери",
                            CategoryNumber = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Побутова техніка",
                            CategoryNumber = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Сантехніка та ремонт",
                            CategoryNumber = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Дитячі товари",
                            CategoryNumber = 0
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Офіс,школа,книги",
                            CategoryNumber = 0
                        });
                });

            modelBuilder.Entity("Catalog.Core.Goods", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodsId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("TypegId")
                        .HasColumnType("int");

                    b.HasKey("GoodsId");

                    b.HasIndex("BrandId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TypegId");

                    b.ToTable("Goodes");

                    b.HasData(
                        new
                        {
                            GoodsId = 1,
                            BrandId = 1,
                            BuyerId = 1,
                            CategoryId = 1,
                            SellerId = 1,
                            TypegId = 1
                        },
                        new
                        {
                            GoodsId = 2,
                            BrandId = 2,
                            BuyerId = 2,
                            CategoryId = 2,
                            SellerId = 2,
                            TypegId = 2
                        });
                });

            modelBuilder.Entity("Catalog.Core.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"), 1L, 1);

                    b.Property<string>("SellerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SellerId");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            SellerId = 1,
                            SellerName = "Rozetka"
                        },
                        new
                        {
                            SellerId = 2,
                            SellerName = "PartnerIT"
                        },
                        new
                        {
                            SellerId = 3,
                            SellerName = "BestDealYear"
                        },
                        new
                        {
                            SellerId = 4,
                            SellerName = "Free Sale"
                        },
                        new
                        {
                            SellerId = 5,
                            SellerName = "Anita"
                        },
                        new
                        {
                            SellerId = 6,
                            SellerName = "Zaino"
                        });
                });

            modelBuilder.Entity("Catalog.Core.Typeg", b =>
                {
                    b.Property<int>("TypegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypegId"), 1L, 1);

                    b.Property<string>("TypegName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypegId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypegId = 1,
                            TypegName = "Ноутбуки"
                        },
                        new
                        {
                            TypegId = 2,
                            TypegName = "Техніка для кухні"
                        },
                        new
                        {
                            TypegId = 3,
                            TypegName = "Кераміка"
                        },
                        new
                        {
                            TypegId = 4,
                            TypegName = "Іграшки"
                        },
                        new
                        {
                            TypegId = 5,
                            TypegName = "Все для навчання"
                        });
                });

            modelBuilder.Entity("Catalog.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "22230341-3792-439f-8141-b95b97ffc10e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ccc4416-9a17-4512-a394-4a9134ab6ceb",
=======
                            Id = "5dc0d821-800a-408f-aa6d-2b76a2f86ab0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b3d21a8-c4f0-4a18-98db-397ddafb88a0",
>>>>>>> Stashed changes
                            Email = "admin@catalogofgoods.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CATALOGOFGOODS.COM",
                            NormalizedUserName = "ADMIN@CATALOGOFGOODS.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEJl0egXpLcTWsxJ7hoDzkq9wFPeeyPU1mqISl1MMfy2iihMhzZ0tVQDWs29iUFVRJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8a7e3a4-60e1-49ff-b263-5475c308054c",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEFOSHKRpOnUS0WHXkhyQaL0U+VAd4RbD6/ymPnarvzVu4qq0BDSZljnfbBoE/0qXWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfb1249c-0948-4c1f-9168-a8df01449773",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "admin@catalogofgoods.com"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "68dbaff1-6961-4da8-b14b-4a664d283a58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e6c635f-91a5-4d67-8a5d-5f7d4adc1c83",
=======
                            Id = "f74f8c49-57b1-4054-8594-5b799ba3824b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ff55ab0-be81-452b-ad51-22fb3c4a4bcc",
>>>>>>> Stashed changes
                            Email = "moderator@catalogofgoods.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@CATALOGOFGOODS.COM",
                            NormalizedUserName = "MODERATOR@CATALOGOFGOODS.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEDkzMTeprPPNGeHRF9QdiDscfuaCSKxm6EX+QK8ukyQLWgJ1LKy/wdxTdm4BbH7QTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d01be1-78dd-4a18-b590-acfbc543ef7a",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEIaW+F8mlw2+CjwRFLAY9mq1Kdyd8QKGLIwecf12JkG2mDoDzO5/Q1CTHcAAA0wd7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf2fb4a4-271a-4528-b518-88a5c9013985",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "moderator@catalogofgoods.com"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "d3a289ae-170f-4fee-bdf7-587c32d036ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b6bd83f-f482-4d63-b38d-65b1bad9acc6",
=======
                            Id = "f7115d87-00ad-4bb3-85a5-29513399e0be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1166af13-26fd-4145-b0d4-89631cf5b514",
>>>>>>> Stashed changes
                            Email = "user@catalogofgoods.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@CATALOGOFGOODS.COM",
                            NormalizedUserName = "USER@CATALOGOFGOODS.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEBR+8194xC6rI1l606Qu7JjEKzzV/glHFNAok+AgHnnArsAOnv9umMJH43YTuRIlpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d4931df-bbd0-48e0-99f8-d12d37e4604d",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEBwShN0dsMvbCmQbLfnHbc2CbRva1S6A570Rpx72AznspvEtCtWapmPLPCZXMBWE5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0041dd-f6ab-49eb-85a8-acb75d208a09",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "user@catalogofgoods.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "92be1bd9-1811-4c43-b7e2-123124f9db26",
                            ConcurrencyStamp = "2bb18e84-5745-4936-8a0b-c882364c51dd",
=======
                            Id = "868ac47d-8b0e-4baf-9f6e-c465ac64e46e",
                            ConcurrencyStamp = "12818f00-1ca4-4cbe-ac02-170d2e25db16",
>>>>>>> Stashed changes
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "e2753591-9d1e-4a84-b53e-7dfcc6561a07",
                            ConcurrencyStamp = "54219fd3-f9b3-4908-99bd-fe2c944824f5",
=======
                            Id = "c4452bd0-a1e1-4f35-899b-52fb8317d4a9",
                            ConcurrencyStamp = "5d822f47-d08e-4b83-89ba-7c7da392b6dd",
>>>>>>> Stashed changes
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "10068858-4208-4d2c-88e8-46e0e2b7ed1a",
                            ConcurrencyStamp = "028879ec-fd3d-4613-ba09-f46f4d2e4e68",
=======
                            Id = "1cb6fbfe-55d6-4187-b7d4-7fca0f20de31",
                            ConcurrencyStamp = "c30e6b35-3b63-48fe-bbd1-16e2bdc905a6",
>>>>>>> Stashed changes
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            UserId = "22230341-3792-439f-8141-b95b97ffc10e",
                            RoleId = "92be1bd9-1811-4c43-b7e2-123124f9db26"
                        },
                        new
                        {
                            UserId = "22230341-3792-439f-8141-b95b97ffc10e",
                            RoleId = "10068858-4208-4d2c-88e8-46e0e2b7ed1a"
                        },
                        new
                        {
                            UserId = "d3a289ae-170f-4fee-bdf7-587c32d036ef",
                            RoleId = "10068858-4208-4d2c-88e8-46e0e2b7ed1a"
=======
                            UserId = "5dc0d821-800a-408f-aa6d-2b76a2f86ab0",
                            RoleId = "868ac47d-8b0e-4baf-9f6e-c465ac64e46e"
                        },
                        new
                        {
                            UserId = "5dc0d821-800a-408f-aa6d-2b76a2f86ab0",
                            RoleId = "1cb6fbfe-55d6-4187-b7d4-7fca0f20de31"
                        },
                        new
                        {
                            UserId = "f7115d87-00ad-4bb3-85a5-29513399e0be",
                            RoleId = "1cb6fbfe-55d6-4187-b7d4-7fca0f20de31"
>>>>>>> Stashed changes
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Catalog.Core.Goods", b =>
                {
                    b.HasOne("Catalog.Core.Brand", "Brand")
                        .WithMany("Goodes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.Buyer", "Buyer")
                        .WithMany("Goodes")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.Category", "Category")
                        .WithMany("Goodes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.Seller", "Seller")
                        .WithMany("Goodes")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.Typeg", "Typeg")
                        .WithMany("Goodes")
                        .HasForeignKey("TypegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Buyer");

                    b.Navigation("Category");

                    b.Navigation("Seller");

                    b.Navigation("Typeg");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Catalog.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Catalog.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Catalog.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Core.Brand", b =>
                {
                    b.Navigation("Goodes");
                });

            modelBuilder.Entity("Catalog.Core.Buyer", b =>
                {
                    b.Navigation("Goodes");
                });

            modelBuilder.Entity("Catalog.Core.Category", b =>
                {
                    b.Navigation("Goodes");
                });

            modelBuilder.Entity("Catalog.Core.Seller", b =>
                {
                    b.Navigation("Goodes");
                });

            modelBuilder.Entity("Catalog.Core.Typeg", b =>
                {
                    b.Navigation("Goodes");
                });
#pragma warning restore 612, 618
        }
    }
}
